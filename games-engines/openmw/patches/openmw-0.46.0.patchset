From b8a1d045c5e7bac7bdc85149a6071246b3d58191 Mon Sep 17 00:00:00 2001
From: chickfilla <jtmonegro@gmail.com>
Date: Fri, 12 Feb 2021 22:01:12 -0500
Subject: applied 0.45 patch


diff --git a/CMakeLists.txt b/CMakeLists.txt
index d69352c..861ec90 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -120,6 +120,19 @@ endif()
 if (APPLE)
     set(MORROWIND_DATA_FILES "./data" CACHE PATH "location of Morrowind data files")
     set(OPENMW_RESOURCE_FILES "../Resources/resources" CACHE PATH "location of OpenMW resources files")
+elseif(HAIKU)
+    # Paths
+    SET(BINDIR "${CMAKE_INSTALL_PREFIX}" CACHE PATH "Where to install binaries")
+    SET(LIBDIR "${CMAKE_INSTALL_PREFIX}/lib${LIB_SUFFIX}" CACHE PATH "Where to install libraries")
+    SET(DATAROOTDIR "${CMAKE_INSTALL_PREFIX}" CACHE PATH "Sets the root of data directories to a non-default location")
+    SET(GLOBAL_DATA_PATH "${DATAROOTDIR}/games/" CACHE PATH "Set data path prefix")
+    SET(DATADIR "${GLOBAL_DATA_PATH}/openmw" CACHE PATH "Sets the openmw data directories to a non-default location")
+    SET(ICONDIR "${DATAROOTDIR}/pixmaps" CACHE PATH "Set icon dir")
+    SET(LICDIR "${DATAROOTDIR}/licenses/openmw" CACHE PATH "Sets the openmw license directory to a non-default location.")
+    SET(GLOBAL_CONFIG_PATH "${CMAKE_INSTALL_PREFIX}/config/" CACHE PATH "Set config dir prefix")
+    SET(SYSCONFDIR "${GLOBAL_CONFIG_PATH}/openmw" CACHE PATH "Set config dir")
+    set(MORROWIND_DATA_FILES "${CMAKE_INSTALL_PREFIX}/data" CACHE PATH "location of Morrowind data files")
+    set(OPENMW_RESOURCE_FILES "${CMAKE_INSTALL_PREFIX}/resources" CACHE PATH "location of OpenMW resources files")
 elseif(UNIX)
     # Paths
     SET(BINDIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "Where to install binaries")
diff --git a/apps/launcher/graphicspage.cpp b/apps/launcher/graphicspage.cpp
index 6bc22ba..1afc59a 100644
--- a/apps/launcher/graphicspage.cpp
+++ b/apps/launcher/graphicspage.cpp
@@ -15,7 +15,11 @@
 #define MAC_OS_X_VERSION_MIN_REQUIRED __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
 #endif // MAC_OS_X_VERSION_MIN_REQUIRED
 
+#ifdef __HAIKU__
+#include <Screen.h>
+#else
 #include <SDL_video.h>
+#endif
 
 #include <components/files/configurationmanager.hpp>
 #include <components/misc/gcd.hpp>
@@ -63,6 +67,9 @@ bool Launcher::GraphicsPage::setupSDL()
     }
 #endif
 
+#ifdef __HAIKU__
+	int displays = 1;
+#else
     int displays = SDL_GetNumVideoDisplays();
 
     if (displays < 0)
@@ -75,7 +82,7 @@ bool Launcher::GraphicsPage::setupSDL()
         msgBox.exec();
         return false;
     }
-
+#endif
     screenComboBox->clear();
     for (int i = 0; i < displays; i++)
     {
@@ -265,9 +272,30 @@ void Launcher::GraphicsPage::saveSettings()
         mEngineSettings.setInt("shadow map resolution", "Shadows", cShadowRes);
 }
 
+#ifdef __HAIKU__
+static QString makeModeString(int w, int h)
+{
+	QString aspect = getAspect(w, h);
+	QString resolution = QString::number(w) + QString(" x ") + QString::number(h);
+	if (aspect == QLatin1String("16:9") || aspect == QLatin1String("16:10")) {
+		resolution.append(" (Wide " + aspect + ")");
+	} else if (aspect == QLatin1String("4:3")) {
+		resolution.append(" (Standard 4:3)");
+	}
+	return resolution;
+}
+#endif
+
 QStringList Launcher::GraphicsPage::getAvailableResolutions(int screen)
 {
     QStringList result;
+#ifdef __HAIKU__
+	BScreen mainScreen(B_MAIN_SCREEN_ID);
+	result.append(makeModeString(640, 480));
+	result.append(makeModeString(800, 600));
+	result.append(makeModeString(1024, 768));
+	result.append(makeModeString(mainScreen.Frame().Width() + 1, mainScreen.Frame().Height() + 1));
+#else
     SDL_DisplayMode mode;
     int modeIndex, modes = SDL_GetNumDisplayModes(screen);
 
@@ -307,7 +335,7 @@ QStringList Launcher::GraphicsPage::getAvailableResolutions(int screen)
 
         result.append(resolution);
     }
-
+#endif
     result.removeDuplicates();
     return result;
 }
diff --git a/apps/launcher/maindialog.cpp b/apps/launcher/maindialog.cpp
index f69213c..26cde79 100644
--- a/apps/launcher/maindialog.cpp
+++ b/apps/launcher/maindialog.cpp
@@ -174,8 +174,15 @@ Launcher::FirstRunDialogResult Launcher::MainDialog::showFirstRunDialog()
 
         if (msgBox.clickedButton() == wizardButton)
         {
-            if (mWizardInvoker->startProcess(QLatin1String("openmw-wizard"), false))
+#ifdef __HAIKU__
+            if (!mWizardInvoker->startProcess(QLatin1String("OpenMW-Wizard"), false)) {
+#else
+            if (!mWizardInvoker->startProcess(QLatin1String("openmw-wizard"), false)) {
+#endif
+                return FirstRunDialogResultFailure;
+            } else {
                 return FirstRunDialogResultWizard;
+            }
         }
         else if (msgBox.clickedButton() == skipButton)
         {
@@ -405,7 +412,11 @@ bool Launcher::MainDialog::setupGameData()
 
         if (msgBox.clickedButton() == wizardButton)
         {
-            if (!mWizardInvoker->startProcess(QLatin1String("openmw-wizard"), false))
+#ifdef __HAIKU__
+            if (!mWizardInvoker->startProcess(QLatin1String("OpenMW-Wizard"), false)) {
+#else
+            if (!mWizardInvoker->startProcess(QLatin1String("openmw-wizard"), false)) {
+#endif
                 return false;
         }
     }
@@ -611,6 +622,10 @@ void Launcher::MainDialog::play()
 
     // Launch the game detached
 
+#ifdef __HAIKU__
+    if (mGameInvoker->startProcess(QLatin1String("OpenMW"), true))
+#else
     if (mGameInvoker->startProcess(QLatin1String("openmw"), true))
+#endif
         return qApp->quit();
 }
diff --git a/apps/launcher/sdlinit.cpp b/apps/launcher/sdlinit.cpp
index 1fe1fd4..22e816f 100644
--- a/apps/launcher/sdlinit.cpp
+++ b/apps/launcher/sdlinit.cpp
@@ -5,6 +5,7 @@
 
 bool initSDL()
 {
+#ifndef __HAIKU__
     SDL_SetHint(SDL_HINT_RENDER_DRIVER, "software");
     SDL_SetMainReady();
     // Required for determining screen resolution and such on the Graphics tab
@@ -14,12 +15,14 @@ bool initSDL()
     }
     signal(SIGINT, SIG_DFL); // We don't want to use the SDL event loop in the launcher,
     // so reset SIGINT which SDL wants to redirect to an SDL_Quit event.
-
+#endif
     return true;
 }
 
 void quitSDL()
 {
+#ifndef __HAIKU__
     // Disconnect from SDL processes
     SDL_Quit();
+#endif
 }
diff --git a/apps/launcher/settingspage.cpp b/apps/launcher/settingspage.cpp
index 59d7cfd..d7a2730 100644
--- a/apps/launcher/settingspage.cpp
+++ b/apps/launcher/settingspage.cpp
@@ -97,8 +97,11 @@ Launcher::SettingsPage::~SettingsPage()
 void Launcher::SettingsPage::on_wizardButton_clicked()
 {
     mMain->writeSettings();
-
+#ifdef __HAIKU__
+    if (!mWizardInvoker->startProcess(QLatin1String("OpenMW-Wizard"), false))
+#else
     if (!mWizardInvoker->startProcess(QLatin1String("openmw-wizard"), false))
+#endif
         return;
 }
 
diff --git a/apps/openmw/engine.cpp b/apps/openmw/engine.cpp
index ec8c1e3..10e0313 100644
--- a/apps/openmw/engine.cpp
+++ b/apps/openmw/engine.cpp
@@ -363,7 +363,11 @@ void OMW::Engine::createWindow(Settings::Manager& settings)
         pos_y = SDL_WINDOWPOS_UNDEFINED_DISPLAY(screen);
     }
 
+#ifdef __HAIKU__
+	Uint32 flags = SDL_WINDOW_OPENGL|SDL_WINDOW_SHOWN;
+#else
     Uint32 flags = SDL_WINDOW_OPENGL|SDL_WINDOW_SHOWN|SDL_WINDOW_RESIZABLE;
+#endif
     if(fullscreen)
         flags |= SDL_WINDOW_FULLSCREEN;
 
diff --git a/apps/openmw/main.cpp b/apps/openmw/main.cpp
index a39dd2e..446414c 100644
--- a/apps/openmw/main.cpp
+++ b/apps/openmw/main.cpp
@@ -249,6 +249,11 @@ int runApplication(int argc, char *argv[])
     boost::filesystem::current_path(binary_path.parent_path());
     setenv("OSG_GL_TEXTURE_STORAGE", "OFF", 0);
 #endif
+#ifdef __HAIKU__
+	boost::filesystem::path binary_path = boost::filesystem::system_complete(boost::filesystem::path(argv[0]));
+	boost::filesystem::current_path(binary_path.parent_path());
+	setenv("OPENMW_DECOMPRESS_TEXTURES", "1", 1);
+#endif
 
     Files::ConfigurationManager cfgMgr;
     std::unique_ptr<OMW::Engine> engine;
diff --git a/apps/openmw/mwbase/world.hpp b/apps/openmw/mwbase/world.hpp
index 31d4a1b..39a2184 100644
--- a/apps/openmw/mwbase/world.hpp
+++ b/apps/openmw/mwbase/world.hpp
@@ -314,7 +314,7 @@ namespace MWBase
             virtual bool castRay (float x1, float y1, float z1, float x2, float y2, float z2) = 0;
 
             virtual bool castRay(const osg::Vec3f& from, const osg::Vec3f& to, int mask, const MWWorld::ConstPtr& ignore) = 0;
-
+            
             virtual void setActorCollisionMode(const MWWorld::Ptr& ptr, bool internal, bool external) = 0;
             virtual bool isActorCollisionEnabled(const MWWorld::Ptr& ptr) = 0;
 
diff --git a/apps/openmw/mwclass/npc.cpp b/apps/openmw/mwclass/npc.cpp
index 297471e..db78dc5 100644
--- a/apps/openmw/mwclass/npc.cpp
+++ b/apps/openmw/mwclass/npc.cpp
@@ -942,9 +942,11 @@ namespace MWClass
         const float normalizedEncumbrance = getNormalizedEncumbrance(ptr);
 
         bool swimming = world->isSwimming(ptr);
+
         bool sneaking = MWBase::Environment::get().getMechanicsManager()->isSneaking(ptr);
         bool running = stats.getStance(MWMechanics::CreatureStats::Stance_Run);
         bool inair = !world->isOnGround(ptr) && !swimming && !world->isFlying(ptr);
+        
         running = running && (inair || MWBase::Environment::get().getMechanicsManager()->isRunning(ptr));
 
         float walkSpeed = gmst.fMinWalkSpeed->mValue.getFloat() + 0.01f*npcdata->mNpcStats.getAttribute(ESM::Attribute::Speed).getModified()*
diff --git a/apps/openmw/mwmechanics/character.cpp b/apps/openmw/mwmechanics/character.cpp
index b5addea..314a8e4 100644
--- a/apps/openmw/mwmechanics/character.cpp
+++ b/apps/openmw/mwmechanics/character.cpp
@@ -324,7 +324,7 @@ void CharacterController::refreshJumpAnims(const std::string& weapShortGroup, Ju
 {
     if (!force && jump == mJumpState && idle == CharState_None)
         return;
-
+    
     std::string jumpAnimName;
     MWRender::Animation::BlendMask jumpmask = MWRender::Animation::BlendMask_All;
     if (jump != JumpState_None)
@@ -513,7 +513,6 @@ void CharacterController::refreshMovementAnims(const std::string& weapShortGroup
                     // For upper body there will be idle animation.
                     if (movemask == MWRender::Animation::BlendMask_LowerBody && idle == CharState_None)
                         idle = CharState_Idle;
-
                     if (movemask == MWRender::Animation::BlendMask_LowerBody)
                         resetIdle = false;
                 }
diff --git a/components/crashcatcher/crashcatcher.cpp b/components/crashcatcher/crashcatcher.cpp
index 006ab2d..0d7311b 100644
--- a/components/crashcatcher/crashcatcher.cpp
+++ b/components/crashcatcher/crashcatcher.cpp
@@ -12,7 +12,9 @@
 
 #include <pthread.h>
 #include <stdbool.h>
+#ifndef __HAIKU__
 #include <sys/ptrace.h>
+#endif
 
 #include <components/debug/debuglog.hpp>
 
diff --git a/components/crashcatcher/crashcatcher.hpp b/components/crashcatcher/crashcatcher.hpp
index fd8f0d1..5b1bc71 100644
--- a/components/crashcatcher/crashcatcher.hpp
+++ b/components/crashcatcher/crashcatcher.hpp
@@ -3,7 +3,7 @@
 
 #include <string>
 
-#if (defined(__APPLE__) || (defined(__linux)  &&  !defined(ANDROID)) || (defined(__unix) &&  !defined(ANDROID)) || defined(__posix))
+#if (defined(__APPLE__) || (defined(__linux)  &&  !defined(ANDROID) && !defined(__HAIKU__)) || (defined(__unix) &&  !defined(ANDROID) && !defined(__HAIKU__)) || defined(__posix))
     #define USE_CRASH_CATCHER 1
 #else
     #define USE_CRASH_CATCHER 0
diff --git a/components/debug/debugging.cpp b/components/debug/debugging.cpp
index dfed077..220d766 100644
--- a/components/debug/debugging.cpp
+++ b/components/debug/debugging.cpp
@@ -88,10 +88,9 @@ namespace Debug
 
 int wrapApplication(int (*innerApplication)(int argc, char *argv[]), int argc, char *argv[], const std::string& appName)
 {
-#if defined _WIN32
-    (void)Debug::attachParentConsole();
-#endif
-
+#ifdef __HAIKU
+	return innerApplication(argc, argv);
+#else
     // Some objects used to redirect cout and cerr
     // Scope must be here, so this still works inside the catch block for logging exceptions
     std::streambuf* cout_rdbuf = std::cout.rdbuf ();
@@ -154,4 +153,5 @@ int wrapApplication(int (*innerApplication)(int argc, char *argv[]), int argc, c
     std::cerr.rdbuf(cerr_rdbuf);
 
     return ret;
+#endif
 }
diff --git a/components/files/fixedpath.hpp b/components/files/fixedpath.hpp
index 2e72b81..97c43f0 100644
--- a/components/files/fixedpath.hpp
+++ b/components/files/fixedpath.hpp
@@ -4,7 +4,7 @@
 #include <string>
 #include <boost/filesystem.hpp>
 
-#if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__)
+#if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__HAIKU__)
 #ifndef ANDROID
     #include <components/files/linuxpath.hpp>
     namespace Files { typedef LinuxPath TargetPathType; }
diff --git a/components/files/linuxpath.cpp b/components/files/linuxpath.cpp
index c3dead2..dc6d2b0 100644
--- a/components/files/linuxpath.cpp
+++ b/components/files/linuxpath.cpp
@@ -1,6 +1,6 @@
 #include "linuxpath.hpp"
 
-#if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__)
+#if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__HAIKU__)
 
 #include <pwd.h>
 #include <unistd.h>
@@ -58,17 +58,32 @@ LinuxPath::LinuxPath(const std::string& application_name)
 
 boost::filesystem::path LinuxPath::getUserConfigPath() const
 {
+#ifdef __HAIKU__
+	boost::filesystem::path path("/boot/home/config/settings");
+	return  path / mName;
+#else
     return getEnv("XDG_CONFIG_HOME", getUserHome() / ".config") / mName;
+#endif
 }
 
 boost::filesystem::path LinuxPath::getUserDataPath() const
 {
+#ifdef __HAIKU__
+	boost::filesystem::path path("/boot/home/config/settings");
+	return  path / mName;
+#else
     return getEnv("XDG_DATA_HOME", getUserHome() / ".local/share") / mName;
+#endif
 }
 
 boost::filesystem::path LinuxPath::getCachePath() const
 {
+#ifdef __HAIKU__
+       boost::filesystem::path path("/boot/home/config/cache");
+       return  path / mName;
+#else
     return getEnv("XDG_CACHE_HOME", getUserHome() / ".cache") / mName;
+#endif
 }
 
 boost::filesystem::path LinuxPath::getGlobalConfigPath() const
diff --git a/components/files/linuxpath.hpp b/components/files/linuxpath.hpp
index 7950157..32ff3d8 100644
--- a/components/files/linuxpath.hpp
+++ b/components/files/linuxpath.hpp
@@ -1,7 +1,7 @@
 #ifndef COMPONENTS_FILES_LINUXPATH_H
 #define COMPONENTS_FILES_LINUXPATH_H
 
-#if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__)
+#if defined(__linux__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__OpenBSD__) || defined(__HAIKU__)
 
 #include <boost/filesystem.hpp>
 
diff --git a/files/openmw.appdata.xml b/files/openmw.appdata.xml
index edbeb1a..8924636 100644
--- a/files/openmw.appdata.xml
+++ b/files/openmw.appdata.xml
@@ -44,7 +44,7 @@ Copyright 2020 Bret Curtis <psi29a@gmail.com>
   <category>RolePlaying</category>
  </categories>
  <releases>
-  <release version="@OPENMW_VERSION@" date="@OPENMW_VERSION_COMMITDATE@"/>
+  <release version="0.46.0" date="2018-10-30"/>
  </releases>
  <url type="homepage">https://openmw.org</url>
  <url type="bugtracker">https://gitlab.com/OpenMW/openmw/issues</url>
-- 
2.30.0

